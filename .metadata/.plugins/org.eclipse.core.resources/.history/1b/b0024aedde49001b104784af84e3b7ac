package com.bitcamp.myweb;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.bitcamp.myweb.admin.AdminService;
import com.bitcamp.myweb.admin.AdminVO;
import com.bitcamp.myweb.manage.ManageService;
import com.bitcamp.myweb.manage.ManageVO;

@Controller
@RequestMapping(value="/admin")
public class AdminController {
	@Autowired
	AdminService adminService;
	
	@Autowired
	ManageService manageService;
	
	@RequestMapping(value="/login", method=RequestMethod.GET)
	public void login() {}
	
	@RequestMapping(value="login", method=RequestMethod.POST)
	public ModelAndView login_ok(AdminVO vo, ModelAndView mav, HttpSession session) {
		if (vo.getId() == null || vo.getId().equals("")) {
			throw new IllegalArgumentException("아이디는 반드시 입력해야 합니다.");
		}
		
		AdminVO admin = adminService.getAdminLoginChk(vo);
		
		session.setAttribute("loginAdmin", admin);
		mav.setViewName("admin/list");
		
		return mav;
	}
	
	@RequestMapping(value="/logout", method=RequestMethod.GET)
	public String logout(HttpSession session) {
		session.invalidate();
		
		return "admin/login";
	}
	
	@ModelAttribute("conditionMap")
	public Map<String, String> searchConditionMap() {
		Map<String, String> conditionMap = new HashMap<String, String>();
		conditionMap.put("ID", "id");
		conditionMap.put("이름", "name");
		return conditionMap;
	}

	@RequestMapping(value = "/list")
	public String list(ManageVO vo, AdminVO avo, Model model) {
		List<ManageVO> list = manageService.searchUser(vo);

		model.addAttribute("list", list);
		return "admin/list";
	}

	@RequestMapping(value = "/detail", method = RequestMethod.GET)
	public String detail(@RequestParam("no") int no, Model model) {
		ManageVO manage = manageService.detailUser(new ManageVO(no));
		model.addAttribute("manage", manage);

		return "admin/detail";
	}

	@RequestMapping(value = "/search", method = RequestMethod.GET)
	public String search(Model model) {

		return "admin/search";
	}

	@RequestMapping(value = "/modify", method = RequestMethod.GET)
	public String modify(@RequestParam("no") int no, Model model) {
		ManageVO manage = manageService.detailUser(new ManageVO(no));
		model.addAttribute("manage", manage);
		return "admin/modify";
	}

	@RequestMapping(value = "/modify", method = RequestMethod.POST)
	public String modify_ok(ManageVO vo, Model model) {
		manageService.updateUser(vo);

		return "redirect:detail?seq=" + vo.getNo();
	}

	@RequestMapping(value = "/delete", method = RequestMethod.GET)
	public String delete(ManageVO vo, Model model) {

		model.addAttribute("manage", vo);

		return "admin/delete";
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public String delete_ok(ManageVO vo, Model model) {
		manageService.deleteUser(vo);

		return "redirect:list";
	}

}
